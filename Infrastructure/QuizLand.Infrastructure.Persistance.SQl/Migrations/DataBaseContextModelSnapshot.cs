// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizLand.Infrastructure.Persistance.SQl;

#nullable disable

namespace QuizLand.Infrastructure.Persistance.SQl.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizLand.Domain.Models.CodeLogs.CodeLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CodeLogs");
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Supporters.Supporter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supporters", (string)null);
                });

            modelBuilder.Entity("QuizLand.Domain.Models.TicketMessages.TicketMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSupporter")
                        .HasColumnType("bit");

                    b.Property<long?>("ReplyTo")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("SenderSupporterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SenderUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Ticketid")
                        .HasColumnType("bigint");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReplyTo");

                    b.HasIndex("SenderSupporterId");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("Ticketid");

                    b.ToTable("TicketMessages", (string)null);
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Tickets.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid?>("AssigneeSupporterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeSupporterId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveDeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Coin")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Level")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TokenVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("XP")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("QuizLand.Domain.Models.TicketMessages.TicketMessage", b =>
                {
                    b.HasOne("QuizLand.Domain.Models.TicketMessages.TicketMessage", null)
                        .WithMany()
                        .HasForeignKey("ReplyTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuizLand.Domain.Models.Supporters.Supporter", "SenderSupporter")
                        .WithMany("TicketMessages")
                        .HasForeignKey("SenderSupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QuizLand.Domain.Models.Users.User", "SenderUser")
                        .WithMany("TicketMessages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QuizLand.Domain.Models.Tickets.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("Ticketid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SenderSupporter");

                    b.Navigation("SenderUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Tickets.Ticket", b =>
                {
                    b.HasOne("QuizLand.Domain.Models.Supporters.Supporter", "Supporter")
                        .WithMany("Tickets")
                        .HasForeignKey("AssigneeSupporterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("QuizLand.Domain.Models.Users.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Supporter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Supporters.Supporter", b =>
                {
                    b.Navigation("TicketMessages");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Tickets.Ticket", b =>
                {
                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("QuizLand.Domain.Models.Users.User", b =>
                {
                    b.Navigation("TicketMessages");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
